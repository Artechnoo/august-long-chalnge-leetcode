Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.




class Solution(object):
    def minPathSum(self, g):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        r=len(g)
        c=len(g[0])
        #dp=[[0 for i in range(c)] for j in range(r)]
        #dp[0][0]=g[0][0]
        for i in range(1,r):
            g[i][0]=g[i-1][0]+g[i][0]
        #print(g)    
        for i in range(1,c):
            g[0][i]=g[0][i-1]+g[0][i]
        #print(g)
        for i in range(1,r):
            for j in range(1,c):
                g[i][j]=min(g[i-1][j],g[i][j-1])+g[i][j]
        #print(g)
        return g[-1][-1]
            
