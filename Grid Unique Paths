
A robot is located at the top-left corner of an A x B grid (marked ‘Start’ in the diagram below).

Path Sum: Example 1

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).

How many possible unique paths are there?

Note: A and B will be such that the resulting answer fits in a 32 bit signed integer.

Example :

Input : A = 2, B = 2
Output : 2

2 possible routes : (0, 0) -> (0, 1) -> (1, 1) 
              OR  : (0, 0) -> (1, 0) -> (1, 1)




class Solution:
    # @param A : integer
    # @param B : integer
    # @return an integer
    def uniquePaths(self, A, B):
        dp=[]
        for i in range(A+1):
            dp.append([])
            for j in range(B+1):
                dp[-1].append(0)
        i=A
        j=B
        while(i>0):
            dp[i][B]=1
            i-=1
        while(j>0):
            dp[A][j]=1
            j-=1
        i=A-1
        j=B-1
        
        while(i>0):
            j=B-1
            while(j>0):
                dp[i][j]=dp[i+1][j]+dp[i][j+1]
                j-=1
            i-=1
        return dp[1][1]
